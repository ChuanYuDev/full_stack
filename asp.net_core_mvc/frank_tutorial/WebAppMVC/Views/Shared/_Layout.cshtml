@* 
`_` of `_Layout`: layout file instead of normal view file

Shared layout among other views
*@

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,charset initial-scale=1.0">
    <title>Supermarket Management</title>

    @*
    Add bootstrap css file
    Use `~/lib/`
    *@
    <link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.css">

    @*
    asp-append-version="true"
        We normally use static files like CSS, Image and JS files to our website to make it interactive and dynamic

        But when we update any file like css, js or image then we need to tell the browser to take the latest file, not the oldest one
            And we really don't want user to do full refresh each and every time when we change/update css, js or image file
 
        There were many options available earlier, like below, to make it possible without having users do a full refresh or Ctrl + F5 or Ctrl + R which was really annoying
            Change the image file name to have updated image on browser 
            Add random string behind the js, css or image url

        The good news is that ASP.NET Core has in-build feature solution for this issue
            asp-append-version="true" 
            It means no more need to use  Ctrl + F5 or Ctrl + R to do a full refresh now
    *@
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true">
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg bg-body-tertiary">
        <div class="container-fluid">
            <a class="navbar-brand" asp-area="" asp-controller="home" asp-action="index">Supermarket</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        @* <a class="nav-link text-dark" href="/home/index">Home</a> *@

                        @* Use tag helper as Categories/Index.cshtml *@
                        <a class="nav-link text-dark" asp-controller="home" asp-action="index">Home</a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-controller="sales" asp-action="index">Sell</a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-controller="categories" asp-action="index">Categories</a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-controller="products" asp-action="index">Products</a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-controller="transactions" asp-action="index">Transactions</a>
                    </li>
                </ul>

                <partial name="_LoginPartial"/>
            </div>
        </div>
        </nav>
    </header>
    <div class="container">

        @* Bootstrap Spacing, padding bottom 3 *@
        <div class="pb-3 pt-3">
            @* 
            Specify part of view to this placeholder
                Must pass a name parameter

                Second parameter:
                    true or default: this is a required section, all of the view will have to use the title section
                    false: this is a optional section

                Syntax:
                    @RenderSection("title", false)

                    Or using Named arguments
                    @RenderSection("title", required: false)
            
            Pages in Identity will also use `_Layout.cshtml`
                They don't contain title section
                Change it to optional
            *@
            @RenderSection("title", required: false)
            <hr>
        </div>

        <div>
            @*
            Placeholder for each view

            If we put any Javascript in the Categories/Index.cshtml, it is actually put in this <div> element 
                Which is not best practice

            Best practice is to render Javascript file right before </body> closing tag
                We can create an other section
            *@
            @RenderBody()
        </div>
    </div>

    @*
    Adding jQuery to Your Web Pages
        There are several ways to start using jQuery on your web site
        You can:
        Download the jQuery library from jQuery.com
        Include jQuery from a CDN (Content delivery network), like Google
    *@
    <script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous"></script>
    <script src="~/lib/bootstrap/js/bootstrap.js"></script>

    @* 
    I want to use the async version here because we may have a lot of script to render
        So use async version to improve the performance
    *@
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>